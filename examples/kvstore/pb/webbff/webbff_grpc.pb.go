// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: pb/proto/webbff.proto

package webbff

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WebBFFClient is the client API for WebBFF service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WebBFFClient interface {
	Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error)
	Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResp, error)
	Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error)
}

type webBFFClient struct {
	cc grpc.ClientConnInterface
}

func NewWebBFFClient(cc grpc.ClientConnInterface) WebBFFClient {
	return &webBFFClient{cc}
}

func (c *webBFFClient) Login(ctx context.Context, in *LoginReq, opts ...grpc.CallOption) (*LoginResp, error) {
	out := new(LoginResp)
	err := c.cc.Invoke(ctx, "/webbff.WebBFF/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webBFFClient) Set(ctx context.Context, in *SetReq, opts ...grpc.CallOption) (*SetResp, error) {
	out := new(SetResp)
	err := c.cc.Invoke(ctx, "/webbff.WebBFF/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *webBFFClient) Get(ctx context.Context, in *GetReq, opts ...grpc.CallOption) (*GetResp, error) {
	out := new(GetResp)
	err := c.cc.Invoke(ctx, "/webbff.WebBFF/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WebBFFServer is the server API for WebBFF service.
// All implementations must embed UnimplementedWebBFFServer
// for forward compatibility
type WebBFFServer interface {
	Login(context.Context, *LoginReq) (*LoginResp, error)
	Set(context.Context, *SetReq) (*SetResp, error)
	Get(context.Context, *GetReq) (*GetResp, error)
	mustEmbedUnimplementedWebBFFServer()
}

// UnimplementedWebBFFServer must be embedded to have forward compatible implementations.
type UnimplementedWebBFFServer struct {
}

func (UnimplementedWebBFFServer) Login(context.Context, *LoginReq) (*LoginResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedWebBFFServer) Set(context.Context, *SetReq) (*SetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}
func (UnimplementedWebBFFServer) Get(context.Context, *GetReq) (*GetResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedWebBFFServer) mustEmbedUnimplementedWebBFFServer() {}

// UnsafeWebBFFServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WebBFFServer will
// result in compilation errors.
type UnsafeWebBFFServer interface {
	mustEmbedUnimplementedWebBFFServer()
}

func RegisterWebBFFServer(s grpc.ServiceRegistrar, srv WebBFFServer) {
	s.RegisterService(&WebBFF_ServiceDesc, srv)
}

func _WebBFF_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebBFFServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webbff.WebBFF/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebBFFServer).Login(ctx, req.(*LoginReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebBFF_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebBFFServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webbff.WebBFF/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebBFFServer).Set(ctx, req.(*SetReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _WebBFF_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WebBFFServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/webbff.WebBFF/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WebBFFServer).Get(ctx, req.(*GetReq))
	}
	return interceptor(ctx, in, info, handler)
}

// WebBFF_ServiceDesc is the grpc.ServiceDesc for WebBFF service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WebBFF_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "webbff.WebBFF",
	HandlerType: (*WebBFFServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _WebBFF_Login_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _WebBFF_Set_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _WebBFF_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/proto/webbff.proto",
}
